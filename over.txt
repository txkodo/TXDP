
    @overload
    def __call__(self: Mcfunction[Literal[False]], func: Callable[[], None]) -> AsyncMcfunctionDef[None]:pass
    
    @overload
    def __call__(self: Mcfunction[Literal[False]], func: Callable[[], Assign[R0]]) -> AsyncMcfunctionDef[R0]:pass
    
    @overload
    def __call__(self: Mcfunction[Literal[False]], func: Callable[[], tuple[Assign[R0],Assign[R1]]]) -> AsyncMcfunctionDef[tuple[R0,R1]]:pass
    
    @overload
    def __call__(self: Mcfunction[Literal[False]], func: Callable[[], tuple[Assign[R0],Assign[R1],Assign[R2]]]) -> AsyncMcfunctionDef[tuple[R0,R1,R2]]:pass
    
    @overload
    def __call__(self: Mcfunction[Literal[False]], func: Callable[[], tuple[Assign[R0],Assign[R1],Assign[R2],Assign[R3]]]) -> AsyncMcfunctionDef[tuple[R0,R1,R2,R3]]:pass
    
    @overload
    def __call__(self: Mcfunction[Literal[False]], func: Callable[[P0], None]) -> AsyncMcfunctionDef[Assign[P0],None]:pass
    
    @overload
    def __call__(self: Mcfunction[Literal[False]], func: Callable[[P0], Assign[R0]]) -> AsyncMcfunctionDef[Assign[P0],R0]:pass
    
    @overload
    def __call__(self: Mcfunction[Literal[False]], func: Callable[[P0], tuple[Assign[R0],Assign[R1]]]) -> AsyncMcfunctionDef[Assign[P0],tuple[R0,R1]]:pass
    
    @overload
    def __call__(self: Mcfunction[Literal[False]], func: Callable[[P0], tuple[Assign[R0],Assign[R1],Assign[R2]]]) -> AsyncMcfunctionDef[Assign[P0],tuple[R0,R1,R2]]:pass
    
    @overload
    def __call__(self: Mcfunction[Literal[False]], func: Callable[[P0], tuple[Assign[R0],Assign[R1],Assign[R2],Assign[R3]]]) -> AsyncMcfunctionDef[Assign[P0],tuple[R0,R1,R2,R3]]:pass
    
    @overload
    def __call__(self: Mcfunction[Literal[False]], func: Callable[[P0,P1], None]) -> AsyncMcfunctionDef[Assign[P0],Assign[P1],None]:pass
    
    @overload
    def __call__(self: Mcfunction[Literal[False]], func: Callable[[P0,P1], Assign[R0]]) -> AsyncMcfunctionDef[Assign[P0],Assign[P1],R0]:pass
    
    @overload
    def __call__(self: Mcfunction[Literal[False]], func: Callable[[P0,P1], tuple[Assign[R0],Assign[R1]]]) -> AsyncMcfunctionDef[Assign[P0],Assign[P1],tuple[R0,R1]]:pass
    
    @overload
    def __call__(self: Mcfunction[Literal[False]], func: Callable[[P0,P1], tuple[Assign[R0],Assign[R1],Assign[R2]]]) -> AsyncMcfunctionDef[Assign[P0],Assign[P1],tuple[R0,R1,R2]]:pass
    
    @overload
    def __call__(self: Mcfunction[Literal[False]], func: Callable[[P0,P1], tuple[Assign[R0],Assign[R1],Assign[R2],Assign[R3]]]) -> AsyncMcfunctionDef[Assign[P0],Assign[P1],tuple[R0,R1,R2,R3]]:pass
    
    @overload
    def __call__(self: Mcfunction[Literal[False]], func: Callable[[P0,P1,P2], None]) -> AsyncMcfunctionDef[Assign[P0],Assign[P1],Assign[P2],None]:pass
    
    @overload
    def __call__(self: Mcfunction[Literal[False]], func: Callable[[P0,P1,P2], Assign[R0]]) -> AsyncMcfunctionDef[Assign[P0],Assign[P1],Assign[P2],R0]:pass
    
    @overload
    def __call__(self: Mcfunction[Literal[False]], func: Callable[[P0,P1,P2], tuple[Assign[R0],Assign[R1]]]) -> AsyncMcfunctionDef[Assign[P0],Assign[P1],Assign[P2],tuple[R0,R1]]:pass
    
    @overload
    def __call__(self: Mcfunction[Literal[False]], func: Callable[[P0,P1,P2], tuple[Assign[R0],Assign[R1],Assign[R2]]]) -> AsyncMcfunctionDef[Assign[P0],Assign[P1],Assign[P2],tuple[R0,R1,R2]]:pass
    
    @overload
    def __call__(self: Mcfunction[Literal[False]], func: Callable[[P0,P1,P2], tuple[Assign[R0],Assign[R1],Assign[R2],Assign[R3]]]) -> AsyncMcfunctionDef[Assign[P0],Assign[P1],Assign[P2],tuple[R0,R1,R2,R3]]:pass
    
    @overload
    def __call__(self: Mcfunction[Literal[False]], func: Callable[[P0,P1,P2,P3], None]) -> AsyncMcfunctionDef[Assign[P0],Assign[P1],Assign[P2],Assign[P3],None]:pass
    
    @overload
    def __call__(self: Mcfunction[Literal[False]], func: Callable[[P0,P1,P2,P3], Assign[R0]]) -> AsyncMcfunctionDef[Assign[P0],Assign[P1],Assign[P2],Assign[P3],R0]:pass
    
    @overload
    def __call__(self: Mcfunction[Literal[False]], func: Callable[[P0,P1,P2,P3], tuple[Assign[R0],Assign[R1]]]) -> AsyncMcfunctionDef[Assign[P0],Assign[P1],Assign[P2],Assign[P3],tuple[R0,R1]]:pass
    
    @overload
    def __call__(self: Mcfunction[Literal[False]], func: Callable[[P0,P1,P2,P3], tuple[Assign[R0],Assign[R1],Assign[R2]]]) -> AsyncMcfunctionDef[Assign[P0],Assign[P1],Assign[P2],Assign[P3],tuple[R0,R1,R2]]:pass
    
    @overload
    def __call__(self: Mcfunction[Literal[False]], func: Callable[[P0,P1,P2,P3], tuple[Assign[R0],Assign[R1],Assign[R2],Assign[R3]]]) -> AsyncMcfunctionDef[Assign[P0],Assign[P1],Assign[P2],Assign[P3],tuple[R0,R1,R2,R3]]:pass
    